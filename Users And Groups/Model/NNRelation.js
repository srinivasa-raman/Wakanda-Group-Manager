function NNRelation(config){    this.events 		= new NNRelationEvents();    this.methods 		= new NNRelationMethods();}function NNRelationEvents(){	}NNRelationEvents.prototype.onValidate = function(){	var config = require('utils').getConfig(this.getDataClass().getName());	    if(config.ERRORS){        var errors = config.ERRORS;		        if(errors['DC1Empty'] && !this[config.DC1.relatedAttribute]){            return errors['DC1Empty'];        }		        if(errors['DC2Empty'] && !this[config.DC2.relatedAttribute]){            return errors['DC2Empty'];        }		        if(errors['alreadyExists']){            var            attrDC1		= config.DC1.relatedAttribute,            ID_DC1 		= config.DC1.ID_attr,            attrDC2 	= config.DC2.relatedAttribute,            ID_DC2 		= config.DC2.ID_attr,            relEntity 	= this.getDataClass().find( attrDC1 + '.' + ID_DC1  + ' = :1 and ' +  attrDC2 + '.' + ID_DC2  + ' = :2' , this[attrDC1][ID_DC1] , this[attrDC2][ID_DC2]);			            if(relEntity && this.isNew()){                return errors['alreadyExists'];            }        }    }}function NNRelationMethods(){	}NNRelationMethods.prototype.getAll = function(options){	options			= options || {};		var    config     		= require('utils').getConfig(options.dc1Name , options.dc2Name),    attrDC1			= config.DC1.relatedAttribute,    ID_DC1			= config.DC1.ID_attr,    attrDC2			= config.DC2.relatedAttribute,    ID_DC2			= config.DC2.ID_attr,    dc1				= this[attrDC1].relatedDataClass,    dc2				= this[attrDC2].relatedDataClass,    columns			= options.columnsQuery ? dc2.query(options.columnsQuery) : dc2,    rowsCollection	= options.rowsQuery ? dc1.query(options.rowsQuery) : dc1,    res 			= [],    that			= this,    columnsMeta		= {},    tempColumns 	= [];        columns.forEach(function(entity){    	tempColumns.push(entity[ID_DC2]);    	    	if(config.DC2.attributes && dc2[config.DC2.attributes] && entity[config.DC2.attributes] && entity[config.DC2.attributes].length){    		columnsMeta[entity[ID_DC2]] = entity[config.DC2.attributes].toArray('title , name , type , defaultValue , options');    	}    });        rowsCollection.forEach(function(entity){    	var    	opts = {    		columns			: tempColumns,    		addToColumns	: options.addToColumns,    		ID 				: entity[ID_DC1],    		dc1Name			: options.dc1Name,    		dc2Name			: options.dc2Name    	};    	    	res.push(that.getByID(opts));    });        return {    	result 	: res,    	meta	: {    		columns : columnsMeta    	}    };}NNRelationMethods.prototype.getByID = function(options){	options			= options || {};	    var    that				= this,    config              = require('utils').getConfig(options.dc1Name , options.dc2Name),    attrDC1				= config.DC1.relatedAttribute,    ID_DC1 				= config.DC1.ID_attr,    attrDC2 			= config.DC2.relatedAttribute,    ID_DC2 				= config.DC2.ID_attr,    columns				= options.columns,    addToColumns		= options.addToColumns || [],    dc1Entity			= this[attrDC1].relatedDataClass(options.ID),    relationCollection	= options.columns ? this.query(attrDC1 + '.' + ID_DC1  + ' = :1 and ' +  attrDC2 + '.' + ID_DC2  + ' in :2' , options.ID , columns)                                            : this.query(attrDC1 + '.' + ID_DC1  + ' = :1' , this[attrDC1][ID_DC1]),    res 				= {        meta: {        	rowID	: options.ID        }    };        for(var i = 0 , column ; column = addToColumns[i] ; i++ ){    	res['row_' + column] = dc1Entity[column];    }	    relationCollection.forEach(function(entity){    	if(that[config.RELATION_VALUE_ATTR] && that[attrDC2] && config.DC2.attributes && that[attrDC2][config.DC2.attributes] && that[attrDC2][config.DC2.attributes].length){    		res[entity[attrDC2][ID_DC2]] = entity[config.RELATION_VALUE_ATTR];    	}    	else{    		res[entity[attrDC2][ID_DC2]] = true;    	}    });	    return res;}NNRelationMethods.prototype.addNNElement = function(dc1Config , dc2Config , value){	var    config     		= require('utils').getConfig(dc1Config.dcName , dc2Config.dcName),    attrDC1			= config.DC1.relatedAttribute,    attrDC2			= config.DC2.relatedAttribute,    dc1 			= this[attrDC1].relatedDataClass,    dc2 			= this[attrDC2].relatedDataClass,    ID_DC1			= dc1[config.DC1.ID_attr],    ID_DC2			= dc2[config.DC2.ID_attr],    dc1Entity		= null,    dc2Entity		= null;        dc1Config.ID	= require('utils').fixAttrValue(ID_DC1 , dc1Config.ID);    dc2Config.ID	= require('utils').fixAttrValue(ID_DC2 , dc2Config.ID);    dc1Entity		= dc1(dc1Config.ID);    dc2Entity		= dc2(dc2Config.ID);        if(value){    	var entity 	= this.find(attrDC1 + '.' + ID_DC1 + ' = :1 and ' + attrDC2 + '.' + ID_DC2 + ' = :2' ,     							dc1Config.ID , dc2Config.ID);    							    	if(entity){    		entity[config.RELATION_VALUE_ATTR] = JSON.stringify(value);    		entity.save();    		return entity[config.RELATION_VALUE_ATTR];    	}    }        try{    	var entity 		= new this();    	entity[attrDC1] = dc1Entity;    	entity[attrDC2] = dc2Entity;    	if(value){    		entity[config.RELATION_VALUE_ATTR] = JSON.stringify(value);    	}    	entity.save();    	    	return entity[config.RELATION_VALUE_ATTR];    }catch(e){    	    }}NNRelationMethods.prototype.removeNNElement = function(dc1Config , dc2Config){	var    config     			= require('utils').getConfig(dc1Config.dcName , dc2Config.dcName),    attrDC1				= config.DC1.relatedAttribute,    attrDC2				= config.DC2.relatedAttribute,    dc1 				= this[attrDC1].relatedDataClass,    dc2 				= this[attrDC2].relatedDataClass,    ID_DC1				= dc1[config.DC1.ID_attr],    ID_DC2				= dc2[config.DC2.ID_attr],    queryStr			= attrDC1 + '.' + ID_DC1  + ' = :1 and ' +  attrDC2 + '.' + ID_DC2  + ' = :2',    relationCollection	= this.query(queryStr , require('utils').fixAttrValue(ID_DC1 , dc1Config.ID) , require('utils').fixAttrValue(ID_DC2 , dc2Config.ID));        relationCollection.remove();}function NNRelationMember(){    this.methods 				= new NNRelationMemberMethods();    this.methods.getNN.scope 	= 'public';}function NNRelationMemberMethods(){	}NNRelationMemberMethods.prototype.getNN = function(obj){	try{		var config 	= require('utils').getConfig(this.getName() , obj.withDC);		obj.dc1Name = this.getName();		obj.dc2Name = obj.withDC;		return ds[config.RELATION_DC].getAll(obj);	}catch(e){		return {			'headers': {				'X-Status' : "401"			}		}   	}}NNRelationMemberMethods.prototype.addNNElement = function(obj){	try{		var config 	= require('utils').getConfig(this.getName() , obj.withDC.name);				return ds[config.RELATION_DC].addNNElement({			ID 		: obj.ID,			dcName	: this.getName()		},		{			ID 		: obj.withDC.ID,			dcName	: obj.withDC.name		},		obj.value);	}catch(e){		return {			HTTPStream : 'the response',			'headers': {				'X_STATUS' : 401			}		}	}}NNRelationMemberMethods.prototype.removeNNElement = function(obj){	try{		var config 	= require('utils').getConfig(this.getName() , obj.withDC.name);				return ds[config.RELATION_DC].removeNNElement({			ID 		: obj.ID,			dcName	: this.getName()		},		{			ID 		: obj.withDC.ID,			dcName	: obj.withDC.name		});	}catch(e){		return {			'headers': {				'X_STATUS' : 401			}		}	}}